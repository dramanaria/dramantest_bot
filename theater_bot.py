import asyncio
import logging
from datetime import datetime
from typing import Optional, Dict, Any

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

import gspread
from google.oauth2.service_account import Credentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8093213579:AAFvo5tngek9K-x-DDrbI8ibV8sMBPfnnIg"
CHANNEL_ID = "@dramandraman"  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
ADMIN_ID = "5365932431"  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @draman_tt

# Google Sheets –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GOOGLE_CREDENTIALS = {
    "type": "service_account",
    "project_id": "hazel-champion-466216-s8",
    "private_key_id": "e10665e7d80ffed30bd46e6cc575483795418879",
    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDPMbRdiX/2WPXN\nL05oeLyGwPLQArzeOJWbWBzv5nZuRGKoKQ6P3IS9FzmQSMHRh/5A+7RBWiMfadhu\nuROIZ5Dv4HUi9C/rW5f0vVxt1/bH4OiwJdedEsj/SudfZm8wdKxE0YwWSXSqApyf\nei/HNoDbMM4FdI9odtcWAHrPlT4wvfxHPvm1I4wB4VfvOb1natDniOgnZcc/r8DG\n+lIQy8qiTFkJf6fS3cJ2BwfyZxq34asDeE3CkSmUR2zX1CbpZb4ed5M4TQRjDUTX\nhJx5z1OYVB9lo2RXBxmWgnUpYNoITUYoSV7meqqxNxIdHlDF8GEuxjD2Be2PZfYo\ng0tqQLWbAgMBAAECggEACIFd8GPXSzZ33kGD/CyBcYPhk9UA8Ghg1jzF11Oqs4UY\nJBbak6112RaA4btMeLyWtqkxsZsXJQN6nU6SQcyELR/imLNu28A2gTDCzUZXyZKI\nfftxTSMUk2V9d2bKx36KnqD+TK3p3ZuRo8eBLZhyerNkSa7Xi9TEQisPEsI2iHHS\nv+5dBXL00Ak3TrePSknb3YCk2pPblvLxwNXO6gklBllNGClhyWYNyB6lDknQgx3V\nlRavB1oAe84+CXz1EM98H+q5J017uCNajbKgeLwfCTbqamnZDt4ueaPVMb6brki3\n572s8NB56dyY+cf/RrO3ptk7JdnM0wz+ILyfqquvhQKBgQD36Hf426oKVKL+3cLi\nUm2WOYsV2RarZPVHLWQnrmDE36gqwYCqTveeIiEtHDCbmlsjRY5QzlaJg2SrEKNn\nbVSm+M/ghEMzI0OWOixkuiU+aumrgvGuDnqwQibB4yNnf49TizeXZ9ImZQMuvbFN\nmAAfpsp9SVnyIla/56B7JpiOLwKBgQDV9QdLstVpmlLcDFkUoM7HM4FD/M5ku/h1\nuDFQVpgQXIRHuFv7eKDq07qUdKusI/kDajBa1Q2CFNURwR617xjLdZUFiOGckYLM\n+WaqW+mOFH+3omGaM379gWUlZd6wHstsRAYOxw+2J/m5kBxN+QDiXkSmOJhaii9s\nq7ampx6AVQKBgQCVMrFRclJJ2VonbStmrhkJ+iO8yGQeTqpXZfgK8aWHlttMsBxR\nYykfYIb68SZH34POHIRkGWp3ZD5nvaG6E1CJFOF2y+LtmeGJPgWNsYHMqOdss2fk\nSw6Hmahds+eQ2HJX40dXtcICHXTm4n8cpcgdRHJFKKobUZNH94zb0QSrPQKBgQDH\nD3fAOBxSaiBZVquyg4Ke1w6XYKfuFOyvKbXH1ykXX9w6lg4OQ0cD9AWNhZcLS1Ss\nlqlyePJeal9qa1DVWCSrdzQ0uAugDcmyRv/71BPR+sRw54UDYJHv7elbCBJNrfj5\nO7ifGxlFEqBGwwtyiA8IjUg1lkY5RoOlCYWgO7AnGQKBgGE8a4aqYxAesi75xFui\n4ij9vtwOlX0/KKqbhUa/OxFofjCRJkNl8HfQJFsTfsSYcXk5bLD8cZWh4+nFRO1o\nIyq7MqVfxiIoBdwCLLHJlP/DfJIPDuC6IrtxT756QxvFSWIZ8HKGS9mw2z/0ro1M\nCa8nYO+SSHIyyB/kK4op1Yyc\n-----END PRIVATE KEY-----\n",
    "client_email": "id-theater-bot-service@hazel-champion-466216-s8.iam.gserviceaccount.com",
    "client_id": "117654592038716556949",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/id-theater-bot-service%40hazel-champion-466216-s8.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Registration(StatesGroup):
    waiting_for_name = State()
    waiting_for_birth_year = State()
    waiting_for_phone = State()
    waiting_for_seats = State()
    waiting_for_confirmation = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–µ–∫—Ç–∞–∫–ª—è—Ö
shows_data: Dict[str, Dict[str, Any]] = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Google Sheets API
def get_google_sheets_client():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API"""
    scope = ['https://www.googleapis.com/auth/spreadsheets']
    creds = Credentials.from_service_account_info(GOOGLE_CREDENTIALS, scopes=scope)
    client = gspread.authorize(creds)
    return client

def extract_sheet_id(url: str) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL"""
    import re
    match = re.search(r'/spreadsheets/d/([a-zA-Z0-9-_]+)', url)
    return match.group(1) if match else ""

async def check_user_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def check_user_has_username(user: types.User) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è username —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user.username is not None and user.username.strip() != ""

def add_registration_to_sheet(sheet_url: str, user_data: dict) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—É"""
    try:
        client = get_google_sheets_client()
        sheet_id = extract_sheet_id(sheet_url)
        spreadsheet = client.open_by_key(sheet_id)
        worksheet = spreadsheet.get_worksheet(0)  # –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        row_data = [
            datetime.now().strftime("%d.%m.%Y %H:%M:%S"),  # –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏
            f"@{user_data['username']}",  # Username
            user_data['surname'],  # –§–∞–º–∏–ª–∏—è
            user_data['name'],  # –ò–º—è
            user_data['birth_year'],  # –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è
            user_data['phone'],  # –¢–µ–ª–µ—Ñ–æ–Ω
            user_data['seats']  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
        ]
        
        worksheet.append_row(row_data)
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
        return False

def check_duplicate_registration(sheet_url: str, username: str, phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫"""
    try:
        client = get_google_sheets_client()
        sheet_id = extract_sheet_id(sheet_url)
        spreadsheet = client.open_by_key(sheet_id)
        worksheet = spreadsheet.get_worksheet(0)
        
        all_records = worksheet.get_all_records()
        
        for record in all_records:
            if (record.get('Username', '').lower() == f"@{username}".lower() or 
                record.get('–¢–µ–ª–µ—Ñ–æ–Ω', '') == phone):
                return True
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
        return False

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("add_show"))
async def add_show_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–µ–∫—Ç–∞–∫–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer(
        "üìù –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ–∫—Ç–∞–∫–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª—è\n"
        "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n"
        "–°—Å—ã–ª–∫–∞ –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ì–∞–º–ª–µ—Ç\n"
        "25.07.2025 19:00\n"
        "https://docs.google.com/spreadsheets/d/..."
    )

@dp.message(F.text.contains("docs.google.com/spreadsheets"))
async def process_show_data(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    lines = message.text.strip().split('\n')
    if len(lines) < 3:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 3 —Å—Ç—Ä–æ–∫–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞/–≤—Ä–µ–º—è, —Å—Å—ã–ª–∫–∞.")
        return
    
    show_name = lines[0].strip()
    show_datetime = lines[1].strip()
    sheet_url = lines[2].strip()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ
    keyboard = InlineKeyboardBuilder()
    callback_data = f"register_{len(shows_data)}"
    keyboard.add(InlineKeyboardButton(text="üé≠ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data=callback_data))
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ
    shows_data[callback_data] = {
        'name': show_name,
        'datetime': show_datetime,
        'sheet_url': sheet_url
    }
    
    post_text = f"üé≠ **{show_name}**\n\nüìÖ {show_datetime}\n\nüé´ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±–∏–ª–µ—Ç—ã!\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è"
    
    try:
        await bot.send_message(
            CHANNEL_ID,
            post_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await message.answer("‚úÖ –ü–æ—Å—Ç –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query(F.data.startswith("register_"))
async def start_registration(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    show_id = callback.data
    
    if show_id not in shows_data:
        await callback.answer("‚ùå –°–ø–µ–∫—Ç–∞–∫–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    user = callback.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    if not await check_user_subscription(user.id):
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID[1:]}"))
        keyboard.add(InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=show_id))
        
        await callback.message.answer(
            "‚ùóÔ∏è –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è username
    if not await check_user_has_username(user):
        await callback.message.answer(
            "‚ùóÔ∏è –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∏–∫–Ω–µ–π–º) –≤ Telegram:\n\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            "2. –°–æ–∑–¥–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–Ω–æ–≤–∞"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    sheet_url = shows_data[show_id]['sheet_url']
    if check_duplicate_registration(sheet_url, user.username, ""):
        await callback.message.answer("‚ùå –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç —Å–ø–µ–∫—Ç–∞–∫–ª—å!")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(show_id=show_id, user_id=user.id, username=user.username)
    
    # –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    await callback.message.answer(
        f"üé≠ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ **{shows_data[show_id]['name']}**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω",
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –∏ –∏–º–µ–Ω–∏
@dp.message(StateFilter(Registration.waiting_for_name))
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –∏ –∏–º–µ–Ω–∏"""
    name_parts = message.text.strip().split()
    
    if len(name_parts) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω")
        return
    
    surname = name_parts[0]
    name = " ".join(name_parts[1:])
    
    await state.update_data(surname=surname, name=name)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (4 —Ü–∏—Ñ—Ä—ã):\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1990")
    await state.set_state(Registration.waiting_for_birth_year)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message(StateFilter(Registration.waiting_for_birth_year))
async def process_birth_year(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        birth_year = int(message.text.strip())
        current_year = datetime.now().year
        
        if birth_year < 1900 or birth_year > current_year - 5:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1990)")
            return
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1990)")
        return
    
    await state.update_data(birth_year=birth_year)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n–ù–∞–ø—Ä–∏–º–µ—Ä: +380501234567 –∏–ª–∏ 0501234567")
    await state.set_state(Registration.waiting_for_phone)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(StateFilter(Registration.waiting_for_phone))
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if len(phone) < 10:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    data = await state.get_data()
    show_id = data['show_id']
    sheet_url = shows_data[show_id]['sheet_url']
    
    if check_duplicate_registration(sheet_url, "", phone):
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Å–ø–µ–∫—Ç–∞–∫–ª—å!")
        await state.clear()
        return
    
    await state.update_data(phone=phone)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="1 –º–µ—Å—Ç–æ", callback_data="seats_1"))
    keyboard.add(InlineKeyboardButton(text="2 –º–µ—Å—Ç–∞", callback_data="seats_2"))
    keyboard.adjust(2)
    
    await message.answer(
        "üé´ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(Registration.waiting_for_seats)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç
@dp.callback_query(StateFilter(Registration.waiting_for_seats), F.data.startswith("seats_"))
async def process_seats(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç"""
    seats = callback.data.split("_")[1]
    await state.update_data(seats=seats)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    show_id = data['show_id']
    show_info = shows_data[show_id]
    
    confirmation_text = (
        f"üìù **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö**\n\n"
        f"üé≠ –°–ø–µ–∫—Ç–∞–∫–ª—å: {show_info['name']}\n"
        f"üìÖ –î–∞—Ç–∞: {show_info['datetime']}\n\n"
        f"üë§ –§–∞–º–∏–ª–∏—è –ò–º—è: {data['surname']} {data['name']}\n"
        f"üìÖ –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_year']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üé´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {seats}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"))
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no"))
    keyboard.adjust(2)
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(Registration.waiting_for_confirmation)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query(StateFilter(Registration.waiting_for_confirmation))
async def process_confirmation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if callback.data == "confirm_yes":
        data = await state.get_data()
        show_id = data['show_id']
        sheet_url = shows_data[show_id]['sheet_url']
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        if add_registration_to_sheet(sheet_url, data):
            await callback.message.edit_text(
                "‚úÖ **–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!**\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
                parse_mode="Markdown"
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            try:
                admin_text = (
                    f"üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞**\n\n"
                    f"üé≠ –°–ø–µ–∫—Ç–∞–∫–ª—å: {shows_data[show_id]['name']}\n"
                    f"üë§ {data['surname']} {data['name']}\n"
                    f"üì± {data['phone']}\n"
                    f"üé´ –ú–µ—Å—Ç: {data['seats']}\n"
                    f"üë§ @{data['username']}"
                )
                await bot.send_message(ADMIN_ID, admin_text, parse_mode="Markdown")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
                
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    else:
        await callback.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    await state.clear()
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ç–µ–∞—Ç—Ä–∞ DRAMAN!\n\n"
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–ø–µ–∫—Ç–∞–∫–ª–∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ @dramandraman "
        "–∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –ø–æ–¥ –ø–æ—Å—Ç–æ–º –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text = (
        "üé≠ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
        "**–î–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π:**\n"
        "‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @dramandraman\n"
        "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤ Telegram (–µ—Å–ª–∏ –Ω–µ—Ç)\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –ø–æ–¥ –ø–æ—Å—Ç–æ–º –æ —Å–ø–µ–∫—Ç–∞–∫–ª–µ\n"
        "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 2 –º–µ—Å—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É\n"
        "‚Ä¢ –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–ø–µ–∫—Ç–∞–∫–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @draman_tt"
    )
    await message.answer(help_text, parse_mode="Markdown")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è polling)
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())